version: '3.8'

services:
  # PM Bot Enterprise - Aplicación principal
  pm-bot:
    build: .
    container_name: pm-bot-enterprise
    ports:
      - "5000:5000"  # Dashboard web
      - "8000:8000"  # API adicional
    environment:
      - POSTGRES_HOST=postgres
      - REDIS_HOST=redis
      - OLLAMA_HOST=http://ollama:11434
      - LOG_LEVEL=INFO
      - DEBUG_MODE=true
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
      - ./projects:/app/projects
      - ./.env:/app/.env
    depends_on:
      - postgres
      - redis
      - ollama
    networks:
      - pm-bot-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/api/system/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Base de datos PostgreSQL
  postgres:
    image: postgres:15-alpine
    container_name: pm-bot-postgres
    environment:
      POSTGRES_DB: pm_bot_enterprise
      POSTGRES_USER: pm_bot
      POSTGRES_PASSWORD: secure_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./config/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - pm-bot-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U pm_bot -d pm_bot_enterprise"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis para cache y sesiones
  redis:
    image: redis:7-alpine
    container_name: pm-bot-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - pm-bot-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru

  # Ollama para modelos AI locales
  ollama:
    image: ollama/ollama:latest
    container_name: pm-bot-ollama
    ports:
      - "11434:11434"
    volumes:
      - ollama_data:/root/.ollama
    networks:
      - pm-bot-network
    restart: unless-stopped
    environment:
      - OLLAMA_ORIGINS=*
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:11434/api/tags"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Nginx como reverse proxy (opcional)
  nginx:
    image: nginx:alpine
    container_name: pm-bot-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./config/nginx.conf:/etc/nginx/nginx.conf
      - ./config/ssl:/etc/nginx/ssl
    depends_on:
      - pm-bot
    networks:
      - pm-bot-network
    restart: unless-stopped

  # Prometheus para monitoreo (opcional)
  prometheus:
    image: prom/prometheus:latest
    container_name: pm-bot-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - pm-bot-network
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'

  # Grafana para visualización (opcional)
  grafana:
    image: grafana/grafana:latest
    container_name: pm-bot-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./config/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./config/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    networks:
      - pm-bot-network
    restart: unless-stopped

  # Elasticsearch para búsqueda avanzada (opcional)
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: pm-bot-elasticsearch
    environment:
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - xpack.security.enabled=false
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - pm-bot-network
    restart: unless-stopped

# Redes
networks:
  pm-bot-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# Volúmenes persistentes
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  ollama_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  elasticsearch_data:
    driver: local